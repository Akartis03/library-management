openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22077
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - $ref: "#/components/parameters/queryPagination"
        - in: query
          name: pageSize
          description: number of page in the book
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Book"
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /books/{booId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Modify the author of book
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
          description: The book id to be modified
        - name: authorId
          in: path
          required: true
          schema:
            type: string
          description: The id for the new book
      responses:
        200:
          description: Op√©ration successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CrupdateBooks"
  /books/authors:
    put:
      tags:
        - Books
      summary: Update author of more books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        200:
          description: Updating books successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UpdateBookAuthor"
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      operationId: getAuthors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
        - $ref: "#/components/parameters/queryPagination"
        - name: pageSize
          in: query
          description: number of page in the book
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: "#/components/schemas/Author"
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    CrupdateBooks:
      allOf:
        - $ref: "#/components/schemas/Book"
        - type: object
        - required:
            - id
            - bookName
            - pageNumbers
            - topic
            - releaseDate
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"
    Sex:
      type: string
      enum:
        - M
        - F
  parameters:
    queryPagination:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        default: 1
    pathPagination:
      name: page
      in: path
      description: Page number for pagination
      required: true
      schema:
        type: integer
        default: 1
